       	       	     +-------------------------+
		     |		CS 140	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Scott Morris <swmorris@stanford.edu>
Matt Mahowald <mcm2018@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

+++ do we do this yet?

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

+++ 

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

+++

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

We chose a combination of direct, indirect, and doubly indirect. Our
implementation uses 124 direct blocks, 1 * 128 indirect blocks, and 
1 * 128 * 128 doubly indirect blocks.



			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

We used str_tok_r to iterate over the directory names in a path.
The function leverages dir_lookup and lookup, implemented in
the starter code. The traversals only differ in setting the start 
directory, then iteration runs from there. 

>> B3: Look over "pwd.c" in src/examples.  Briefly explain how it
>> determines the present working directory.

pwd begins at the current directory by opening "." and then
iteratively moves up the directory tree until arriving at the
root. Within each iteration, the program opens the parent (breaking
if the parent is "/" and finds the child directory in the parent's
inode. The program gets the name of the child and prepends it
to the cwd. This process continues until arriving at the root,
at which point the cwd process is complete.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

+++ I think we are going to block using a lock on every directory.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

+++ Probably no.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

We use the simple clock hand algorithm to implement a second chance
eviction method. While holding the lock over the entire cache, we
iterate through the buffer, trying to acquire each entry's lock.
If acquired, we check the accessed flag to determine if the block
is evictable. If it is true, we flip the bit, release the lock, and
continue with the iteration. If the block has not been accessed, 
and the block is not being used (indicated by num_users == 0), we
begin the eviction process. First, we remove the entry from the 
cache so no other will assume it is still in the cache, then we
release the cache lock. Finally, if the entry has been dirtied, 
we flush the data, as described in C3's write-behind description.

>> C3: Describe your implementation of write-behind.

We write-behind on three occasions: 1) on eviction; 2) on process
exit; 3) interspersed by a background "flusher" thread.

On eviction, after determining the cache entry has been dirtied,
we add the entry to the "flush_entries" hash. The purpose of this
step is to ensure that other processes wait to read from disk
until the entry has been flushed (it is no longer in the cache, so
the changes can only be found once the entry has flushed). We 
accomplish this using the condition flush_complete. After the 
entry has been added to the flush_entries hash, our implementation
releases the cache_lock, writes to disk, then broadcasts to the
condition's waiters.

+++ On process exit, we fuck shit up.

Our background thread sleeps for a predetermined period, then 
iterates over our entire buffer cache (+++ WITHOUT RELEASING
THE CACHE LOCK) and writing the dirtied blocks to disk.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

Initially, we planned on using a pin flag similar to that in frame
eviction in vm, however we quickly realized that having a boolean
flag limited usage to one user. Ultimately, we chose to use an 
integer to keep track of the number of users modifying a cache entry,
which we ensure is equal to 0 on eviction.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

The entry is removed from the cache hash table. +++ NECESSARY ??? One caveat arises 
when a process waits for an entry to be flushed. If the process is not
the first process to attempt to bring the entry back into the hash table,
we do not need to bring it back.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
